pipeline {
    agent any // This means the pipeline can run on any available agent

    stages {
        // Stage 1: Build
        stage('Build') {
            steps {
                echo 'Building the project...'
                 echo 'Details: The code is being built using an automation tool that compiles and packages the application.'
                echo 'Automation Tool: Maven is being utilized for automating the build process.'
            }
        }

        // Stage 2: Unit and Integration Tests
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running Unit and Integration Tests...'
                echo 'Details: Executing unit tests to verify functionality and integration tests to ensure that all components work together as intended.'
                echo 'Testing Framework: JUnit 5 is used for performing unit tests.'
            }
        }

 post {
                success {
                    emailext(
                        attachLog: true,
                        to: 'diyakundu29@gmail.com',
                        subject: 'Unit and Integration Tests: Success',
                        body: 'Stage 2 has successfully passed. Please refer to the attached logs for more information.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: 'diyakundu29@gmail.com',
                        subject: 'Unit and Integration Tests: Failure',
                        body: 'Stage 2 failed. Please check the attached logs for further details.'
                    )
                }
            }
        }
        // Stage 3: Code Analysis
        stage('Code Analysis') {
            steps {
                echo 'Running Code Analysis...'
                echo 'Details: Performing a code analysis to ensure it adheres to industry standards and best practices.'
                echo 'Analysis Tool: SonarQube is employed for static code analysis.'
            }
        }

        // Stage 4: Security Scan
        stage('Security Scan') {
            steps {
                echo 'Running Security Scan...'
                echo 'Details: Conducting a security scan to identify potential vulnerabilities in the application.'
                echo 'Security Tool: OWASP Dependency-Check is utilized for scanning vulnerabilities.'
            }
        }
         post {
                success {
                    emailext (
                        attachLog: true,
                        to: 'missoceanocean18@gmail.com',
                        subject: 'Security Scan: Successful',
                        body: 'Stage 4 completed successfully. Logs are attached for reference.'
                    )
                }
                failure {
                    emailext(
                        attachLog: true,
                        to: 'missoceanocean18@gmail.com',
                        subject: 'Security Scan: Failed',
                        body: 'Stage 4 encountered a failure. Logs are attached for review.'
                    )
                }
            }
        // Stage 5: Deploy to Staging
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging...'
                  echo 'Details: Deploying the application to the staging environment, simulating a production-like AWS EC2 instance.'
            }
            }
    

        // Stage 6: Integration Tests on Staging
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running Integration Tests on Staging...'
                echo 'Details: Running integration tests in the staging environment to ensure the application behaves as expected in a production-simulated environment.'
            }
            }
        

        // Stage 7: Deploy to Production
        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production...'
                // Commands to deploy the application to production (e.g., AWS CLI, Docker)
            }
        }
    }

    post {
        always {
            script {
                // Save the log file to a workspace directory
                def logFile = "${env.WORKSPACE}/build-log.txt"
                writeFile file: logFile, text: currentBuild.rawBuild.getLog(1000).join('\n')
            }
        }
        success {
            echo 'Pipeline completed successfully!'
            // Send success email notification with the log attached
            emailext(
                subject: 'Build Success: Jenkins Pipeline',
                body: 'The Jenkins pipeline has completed successfully. Please find the attached build log.',
                attachLog: true,
                attachmentsPattern: 'build-log.txt',
                to: 'diyakundu29@example.com'
            )
        }
        failure {
            echo 'Pipeline failed.'
            // Send failure email notification with the log attached
            emailext(
                subject: 'Build Failure: Jenkins Pipeline',
                body: 'The Jenkins pipeline has failed. Please find the attached build log.',
                attachLog: true,
                attachmentsPattern: 'build-log.txt',
                to: 'diyakundu29@gmail.com'
            )
        }
    }
}
