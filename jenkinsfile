pipeline {
    agent any // This means the pipeline can run on any available agent

    stages {
        // Stage 1: Build
        stage('Build') {
            steps {
                echo 'Building the project...'
                // Run build commands (e.g., Maven or Gradle)
                // sh 'mvn clean package'
            }
        }

        // Stage 2: Unit and Integration Tests
        stage('Unit and Integration Tests') {
            steps {
                echo 'Running Unit and Integration Tests...'
                // Run your unit and integration tests (e.g., JUnit, TestNG)
                // sh 'mvn test'
            }
        }

        // Stage 3: Code Analysis
        stage('Code Analysis') {
            steps {
                echo 'Running Code Analysis...'
                // Analyze code with a tool like SonarQube
                // e.g., sh 'sonar-scanner'
            }
        }

        // Stage 4: Security Scan
        stage('Security Scan') {
            steps {
                echo 'Running Security Scan...'
                // Commands for security scanning (e.g., OWASP ZAP or SonarQube Security Plugin)
            }
        }

        // Stage 5: Deploy to Staging
        stage('Deploy to Staging') {
            steps {
                echo 'Deploying to Staging...'
                // Deployment to staging (e.g., AWS EC2, Heroku)
                // e.g., sh 'aws deploy command' or 'heroku deploy command'
            }
        }

        // Stage 6: Integration Tests on Staging
        stage('Integration Tests on Staging') {
            steps {
                echo 'Running Integration Tests on Staging...'
                // Commands to run integration tests on the staging environment
            }
        }

        // Stage 7: Deploy to Production
        stage('Deploy to Production') {
            steps {
                echo 'Deploying to Production...'
                // Commands to deploy the application to production (e.g., AWS CLI, Docker)
            }
        }
    }

    post {
        always {
            script {
                // Save the log file to a workspace directory
                def logFile = "${env.WORKSPACE}/build-log.txt"
                writeFile file: logFile, text: currentBuild.rawBuild.getLog(1000).join('\n')
            }
        }
        success {
            echo 'Pipeline completed successfully!'
            // Send success email notification with the log attached
            emailext(
                subject: 'Build Success: Jenkins Pipeline',
                body: 'The Jenkins pipeline has completed successfully. Please find the attached build log.',
                attachLog: true,
                attachmentsPattern: 'build-log.txt',
                to: 'diyakundu29@example.com'
            )
        }
        failure {
            echo 'Pipeline failed.'
            // Send failure email notification with the log attached
            emailext(
                subject: 'Build Failure: Jenkins Pipeline',
                body: 'The Jenkins pipeline has failed. Please find the attached build log.',
                attachLog: true,
                attachmentsPattern: 'build-log.txt',
                to: 'diyakundu29@gmail.com'
            )
        }
    }
}
