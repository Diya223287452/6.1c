pipeline {
    agent any
    
    stages {
        stage('Initialize') {
            steps {
                script {
                    try {
                        echo "Starting pipeline"
                        // Add any initialization logic here
                    } catch (Exception e) {
                        echo "Error in Initialize stage: ${e.message}"
                        error("Failed during Initialize stage")
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                script {
                    try {
                        echo "Running build..."
                        // Example of your build logic
                        // sh 'make build' (or any build steps you have)
                    } catch (Exception e) {
                        echo "Error in Build stage: ${e.message}"
                        error("Failed during Build stage")
                    }
                }
            }
        }
        
        stage('Test') {
            steps {
                script {
                    try {
                        echo "Running tests..."
                        // Example of your test logic
                        // sh 'make test' (or any testing steps)
                    } catch (Exception e) {
                        echo "Error in Test stage: ${e.message}"
                        error("Failed during Test stage")
                    }
                }
            }
        }
        
        stage('Deploy') {
            steps {
                script {
                    try {
                        echo "Deploying application..."
                        // Example of your deployment logic
                        // sh 'make deploy' (or any deploy steps)
                    } catch (Exception e) {
                        echo "Error in Deploy stage: ${e.message}"
                        error("Failed during Deploy stage")
                    }
                }
            }
        }
    }
    
    post {
        always {
            script {
                try {
                    echo "Cleaning up resources..."
                    // Add any cleanup logic here
                } catch (Exception e) {
                    echo "Error during cleanup: ${e.message}"
                }
            }
        }
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
